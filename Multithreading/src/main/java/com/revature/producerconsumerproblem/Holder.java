package com.revature.producerconsumerproblem;

public class Holder {
	int contents = 0;
	private boolean isAvailable = false;
	
	/**
	 * This class holds all the values generated by another thread
	 * isAvailable will be flipped on and off by other threads
	 * also will contain methods for getting and setting values
	 */
	
	public synchronized int getVal() {
		// this will return the value of the holder to the consumer
		while(!isAvailable) {
			try {
				wait();// this method forces the current thread to wait until some other thread 
				//involkes notify() or notifyAll() on the same ovject
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		isAvailable = false;
		notifyAll();
		
		return contents;
	}
	
	public synchronized void setVal(int val) {
		//this method will be invoked by the producer
		while(isAvailable) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		contents = val;
		isAvailable = true;
		notifyAll();
	}
}
